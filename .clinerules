# Cline 的项目规则 (.clinerules)

这个文件记录了我在与你和这个项目协作过程中学习到的关键模式、偏好和项目智能。

## 关键实现路径 (Critical Implementation Paths)

*   [记录完成特定任务或功能的推荐方法或关键步骤]

## 用户偏好与工作流 (User Preferences & Workflow)

*   **模块化开发与同步:** 在完成每个主要模块或功能阶段的代码编写后，必须进行相应的测试。测试通过后，应立即将相关更改提交 (commit) 并推送 (push) 到 GitHub 仓库。
*   **记忆库优先更新:** 在提醒用户开始新任务或进入下一阶段之前，必须先更新记忆库（特别是 `activeContext.md` 和 `progress.md`）以反映当前状态和下一步计划。
*   **命令路径偏好:** 在使用 `execute_command` 工具执行需要切换目录的命令时，优先使用绝对路径进行 `cd` 操作。
*   **任务完成时更新记忆库:** 在使用 `attempt_completion` 成功完成一个任务后，必须更新记忆库文件（特别是 `activeContext.md` 和 `progress.md`）以反映任务的完成状态和潜在的下一步。
*   [记录用户的特定编码风格、工具偏好或工作流程习惯]

## 项目特定模式 (Project-Specific Patterns)

*   [记录项目中反复出现的独特代码结构、命名约定或架构选择]

## 已知挑战 (Known Challenges)

*   [记录在项目中遇到的常见陷阱、难点或需要特别注意的地方]

## 项目决策演变 (Evolution of Project Decisions)

*   [记录重要技术或产品决策的背景和演变过程]

## 工具使用模式 (Tool Usage Patterns)

*   **提高 `replace_in_file` 成功率:**
    *   **最小化 `SEARCH` 块:** 只包含必要修改行和最少量、确保唯一性的上下文行。避免包含大段未更改代码。
    *   **拆分修改:** 将复杂或多处不连续的修改拆分为多个独立的 `SEARCH/REPLACE` 块，按顺序应用。
    *   **修改前读取:** 在执行 `replace_in_file` 前，如果怀疑文件可能已更改（例如，距离上次读取时间较长，或执行了可能触发格式化的操作），先使用 `read_file` 获取最新内容。
    *   **注意格式化/Linter:** 意识到自动格式化可能改变代码，优先修复 Linter 问题。
    *   **谨慎处理空白:** 确保 `SEARCH` 块中的空格、制表符和换行符与文件完全一致。
    *   **后备方案:** 若 `replace_in_file` 多次失败，可谨慎使用 `write_to_file` 作为后备。
*   [记录针对此项目常用的 Cline 工具组合或特定用法]
